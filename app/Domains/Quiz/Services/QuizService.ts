import Quiz from '#domains/Quiz/Models/Quiz'
import GenerateQuizHistory from '#domains/Quiz/Models/GenerateQuizzHistory'
import Question from '#domains/Question/Models/Question'
import Subject from '#domains/Subject/Models/Subject'
import mongoose from 'mongoose'
import StudentQuiz from '#domains/Quiz/Models/StudentQuiz'
import queue from '@rlanz/bull-queue/services/main'
import JobGenerateQuizzWIthAI from '#jobs/JobGenerateQuizzWIthAI'

export default class QuizService {
  public static async assignQuizToUser(
    quizId: mongoose.Types.ObjectId,
    userId: mongoose.Types.ObjectId
  ): Promise<any> {
    try {
      const quiz = await Quiz.findById(quizId)

      if (!quiz) {
        return {
          status: 'error',
          message: 'Bài kiểm tra không tìm thấy',
          timestamp: new Date().toISOString(),
        }
      }

      const studentQuizz = await StudentQuiz.findOne({
        quizz: quizId,
        student: userId,
      })

      if (studentQuizz) {
        return {
          status: 'error',
          message: 'Bài kiểm tra đã được giao cho học sinh rồi',
          timestamp: new Date().toISOString(),
        }
      }

      // Assign the quiz to the student
      const newStudentQuiz = new StudentQuiz({
        quizz: quizId,
        student: userId,
        number_of_attempts: 0,
        status: 'not_started',
      })

      await newStudentQuiz.save()

      return {
        status: 'success',
        message: 'Bài kiểm tra đã được giao cho học sinh thành công',
        timestamp: new Date().toISOString(),
      }
    } catch {
      return {
        status: 'error',
        message: 'Không thể giao bài kiểm tra',
        timestamp: new Date().toISOString(),
      }
    }
  }

  // Generate quiz with AI
  public static async generateQuizWithAI(data: any, auth: any): Promise<any> {
    try {
      const generateQuizHistory = await GenerateQuizHistory.create({
        user: auth.user._id,
        title: data.title || 'Bài kiểm tra AI',
        provider: data.provider || 'openai',
        modelName: data.model || 'gpt-4',
        data,
        status: 'not_started',
      })

      data.historyId = generateQuizHistory._id
      data.provider = data.provider || 'openai'
      data.modelName = data.model || 'gpt-4'
      // create generate quiz job history
      queue.dispatch(
        JobGenerateQuizzWIthAI,
        { userId: auth.user._id, data },
        {
          queueName: 'startQuiz',
        }
      )

      return { status: 'success', data: {}, timestamp: new Date().toISOString() }
    } catch (error) {
      return {
        status: 'error',
        message: 'Không thể tạo bài kiểm tra với AI',
        timestamp: new Date().toISOString(),
      }
    }
  }

  // Save quiz generated by AI
  public static async saveAiGeneratedQuiz(
    data: any,
    instructorId: mongoose.Types.ObjectId
  ): Promise<any> {
    let session = null
    try {
      session = await mongoose.startSession()
      session.startTransaction()
      const {
        title,
        subject,
        description,
        questions,
        duration,
        maxAttempts,
        totalPoints,
        passingScore,
        showAnswersImmediately,
        shuffleAnswers,
        totalQuestions,
        shuffleQuestions,
        timeLimit,
      } = data

      const className = 'LOP_4'
      // Validate required fields
      if (!questions || !subject || !title) {
        return {
          status: 'error',
          message: 'Thiếu thông tin bắt buộc để lưu bài kiểm tra',
          timestamp: new Date().toISOString(),
        }
      }

      // create subject if not exist
      let subjectId = null
      const existingSubject = await Subject.findOne({ name: subject, class: className })
      if (existingSubject) {
        subjectId = existingSubject._id
      } else {
        // random code for subject chữa in 6 ký tự
        const randomCode = Math.random().toString(36).substring(2, 8).toUpperCase()
        const [newSubject] = await Subject.create(
          [
            {
              name: subject,
              class: className,
              code: randomCode,
              color: '#3B82F6',
              isActive: true,
            },
          ],
          { session }
        )
        subjectId = newSubject._id
      }

      // Insert multiple questions and get their IDs
      const questionIds = []
      for (const question of questions) {
        question.class = className
        question.subject = subjectId
        question.createdBy = instructorId
        question.isActive = true
        const [newQuestion] = await Question.create([question], { session })
        questionIds.push(newQuestion._id)
      }

      // Create new quiz
      const newQuiz = new Quiz({
        title: title || 'Bài kiểm tra AI',
        description,
        questions: questionIds,
        duration: duration || 30, // default 30 minutes
        maxAttempts: maxAttempts || 1,
        totalQuestions: totalQuestions || questions.length,
        totalPoints: totalPoints || 100,
        passingScore: passingScore || 50,
        instructor: instructorId,
        subject: subjectId,
        isActive: true,
        showResultsImmediately: showAnswersImmediately,
        shuffleAnswers: shuffleAnswers || false,
        shuffleQuestions: shuffleQuestions || false,
        timeLimit: timeLimit || null,
        class: className,
        isPublic: false,
        createdBy: instructorId,
        instructions: data.instructions || '',
      })

      // update
      await GenerateQuizHistory.updateOne(
        { _id: data.historyId },
        { status: 'completed', quiz: newQuiz._id },
        { session }
      )

      await newQuiz.save({ session })
      // commit transaction
      await session.commitTransaction()
      return {
        status: 'success',
        message: 'Bài kiểm tra đã được lưu thành công',
        data: newQuiz,
        timestamp: new Date().toISOString(),
      }
    } catch (error) {
      if (session) {
        await session.abortTransaction()
      }
      return {
        status: 'error',
        message: 'Không thể lưu bài kiểm tra',
        timestamp: new Date().toISOString(),
      }
    } finally {
      if (session) {
        session.endSession()
      }
    }
  }
}
